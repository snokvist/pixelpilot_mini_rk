; PixelPilot Mini sample configuration
; Lines starting with ';' are comments. Values are case-insensitive unless noted.

[drm]
; Card/connector selection for the video plane
card = /dev/dri/card0
connector = HDMI-A-1
video-plane-id = 76
blank-primary = false
use-udev = true
osd-plane-id = 0

[udp]
port = 5600
video-pt = 97
audio-pt = 98

[pipeline]
latency-ms = 8
video-queue-leaky = 2
video-queue-pre-buffers = 96
video-queue-post-buffers = 8
video-queue-sink-buffers = 8
video-drop-on-latency = true
max-lateness-ns = 20000000

[audio]
device = plughw:CARD=rockchiphdmi0,DEV=0
disable = false
optional = true

[restarts]
limit = 3
window-ms = 2000

[gst]
log = false

[cpu]
; Example: affinity = 3,4,5
; affinity =

[osd]
enable = true
refresh-ms = 500
plane-id = 0
; Order of elements rendered each update
; The names reference [osd.element.NAME] sections below.
elements = stats, bitrate_plot, jitter_plot

; -----------------------------------------------------------------------------
; Element placement quick reference
;   anchor = top-left | top-mid | top-right | mid-left | mid | mid-right |
;            bottom-left | bottom-mid | bottom-right
;   offset = X,Y pixel nudges applied after anchoring (positive values move
;            right/down, negative values move left/up)
;   size   = WxH in pixels (line plots only)
; Colors accept 8-digit ARGB hex (0xAARRGGBB) or named presets: black, white,
; blue, green, yellow, orange, purple, cyan, magenta, grey, light-grey,
; dark-grey, transparent, transparent-grey, transparent-white, etc. Prefixes
; `#` or `0x` are optional. 6-digit RGB hex implies opaque alpha.
; -----------------------------------------------------------------------------

[osd.element.stats]
type = text
anchor = top-left
padding = 8
background = transparent-grey
border = transparent-white
foreground = white
line = HDMI {display.mode} plane={drm.video_plane_id}
line = UDP port={udp.port} PTv={udp.vid_pt} PTa={udp.aud_pt} lat={pipeline.latency_ms}ms
line = Pipeline {pipeline.state} restarts={pipeline.restart_count}{pipeline.audio_suffix}
line = RTP vpkts={udp.video_packets} loss={udp.lost_packets} reo={udp.reordered_packets} dup={udp.duplicate_packets}
line = Jitter {udp.jitter.latest_ms}/{udp.jitter.avg_ms}ms bitrate {udp.bitrate.latest_mbps}/{udp.bitrate.avg_mbps}Mbps
line = Frames={udp.frames.count} incomplete={udp.frames.incomplete} avg={udp.frames.avg_bytes}B last={udp.frames.last_bytes}B seq={udp.expected_sequence}
line = Drops total={udp.pipeline.drop_total} late={udp.pipeline.drop_too_late} latency={udp.pipeline.drop_on_latency} last={udp.pipeline.last_drop_reason}

; To create additional text blocks duplicate the section with a new element
; name and adjust the anchor/offset. Each `line =` entry appends to that block.
; Example:
; [osd.element.pipeline]
; type = text
; anchor = bottom-right
; offset = -16,-16
; background = 0x60101010
; line = Pipeline {pipeline.state} restart={pipeline.restart_count}

[osd.element.bitrate_plot]
type = line
anchor = bottom-left
offset = 0,-12
size = 360x90
window-seconds = 60
metric = udp.bitrate.latest_mbps
label = Bitrate (Mbit/s)
line-color = orange
background = transparent-grey
grid = transparent-white

; Line plots sample a single metric each refresh and keep a rolling history.
; - window-seconds controls the time axis.
; - size sets the pixel footprint (wider = longer time axis, taller = more
;   vertical resolution).
; - label is a free-form axis caption rendered along the Y axis.
; - info-box toggles the small caption that hugs the plot border.

[osd.element.jitter_plot]
type = line
anchor = bottom-right
size = 320x90
window-seconds = 30
metric = udp.jitter.latest_ms
label = Jitter (ms)
info-box = false
line-color = yellow
background = transparent-grey
grid = transparent-white

; -----------------------------------------------------------------------------
; Text template tokens
; Each {token} in a text line expands to the value listed below.
; Display / DRM
;   {display.mode}              => e.g. 1920x1080@60
;   {display.width}             => active width in pixels
;   {display.height}            => active height in pixels
;   {display.refresh_hz}        => refresh rate in Hz
;   {drm.video_plane_id}        => configured video plane id
;   {drm.osd_plane_id}          => requested OSD plane id
;   {osd.refresh_ms}            => OSD refresh interval
;
; Pipeline / configuration
;   {pipeline.state}            => RUN / STOP / STOPPING
;   {pipeline.restart_count}    => restart counter
;   {pipeline.latency_ms}       => configured network latency target
;   {pipeline.audio_suffix}     => " audio=fakesink" when the audio branch falls back
;   {pipeline.audio_status}     => "fakesink" or "normal"
;
; UDP receiver stats (n/a if metrics disabled)
;   {udp.stats.available}       => yes / no
;   {udp.port} / {udp.vid_pt} / {udp.aud_pt}
;   {udp.video_packets}, {udp.audio_packets}, {udp.total_packets}
;   {udp.ignored_packets}, {udp.duplicate_packets}, {udp.lost_packets}, {udp.reordered_packets}
;   {udp.total_bytes}, {udp.video_bytes}, {udp.audio_bytes}
;   {udp.bitrate.latest_mbps}, {udp.bitrate.avg_mbps}
;   {udp.jitter.latest_ms}, {udp.jitter.avg_ms}
;   {udp.pipeline.drop_total}, {udp.pipeline.drop_too_late}, {udp.pipeline.drop_on_latency}
;   {udp.pipeline.last_drop_reason}, {udp.pipeline.last_drop_seqnum}, {udp.pipeline.last_drop_timestamp_ns}
;   {udp.frames.count}, {udp.frames.incomplete}, {udp.frames.last_bytes}, {udp.frames.avg_bytes}
;   {udp.expected_sequence}, {udp.last_video_timestamp}
;
; -----------------------------------------------------------------------------
; Plot metrics (line elements)
; Assign these to `metric =` for each [osd.element.*] of type=line.
; Units are already converted as noted.
;   udp.bitrate.latest_mbps      (double, Mbps)
;   udp.bitrate.avg_mbps         (double, Mbps)
;   udp.jitter.latest_ms         (double, milliseconds)
;   udp.jitter.avg_ms            (double, milliseconds)
;   udp.pipeline.drop_total      (count)
;   udp.pipeline.drop_on_latency (count)
;   udp.pipeline.drop_too_late   (count)
;   udp.frames.avg_bytes         (average frame size)
;   udp.frames.count             (count)
;   udp.video_packets            (count)
;   udp.duplicate_packets        (count)
;   udp.lost_packets             (count)
;   udp.reordered_packets        (count)
;   pipeline.restart_count       (count)
;   pipeline.latency_ms          (milliseconds)
;
; Additional metrics or visual types (e.g. future bar elements) can be layered on
; by adding new tokens to osd_token_format / osd_metric_sample in src/osd.c.
; For now, the INI still accepts `type = bar` as a placeholder but the renderer
; ignores it until the bar widget is implemented.
